''' Rank poker hands from best to worst (high numbers are worse) '''
import id_er

ranks = list('23456789TJQKA')
suits = list('sdhc')
humdeck = [(x,y) for x in ranks for y in suits]
orddeck = [(ord(x),ord(y)) for x in ranks for y in suits]
hexdeck = [(hex(ord(x)),hex(ord(y))) for x in ranks for y in suits]


def convert(acard):
    ''' Converts human radable cards to hex or vice versa'''
    if acard in humdeck:
        return hexdeck[humdeck.index(acard)]
    else:
        return humdeck[hexdeck.index(acard)]

highcards = {'0x32':319,'0x33':318,'0x34':317,'0x35':316,'0x36':315,
             '0x37':314,'0x38':313,'0x39':312,
             '0x54':311,'0x4a':310,'0x51':309,'0x4b':308,'0x41':307}

def rank_hc(some_made):
    return highcards[some_made[0]]

pairs = { # once the pair-cards of a hand are identified,
          # you only need one of the pair
        '0x32':306, '0x33':305, '0x34':304,
        '0x35':303, '0x36':302, '0x37':301,
        '0x38':300, '0x39':299, '0x54':298,
        '0x4a':297, '0x51':296, '0x4b':295,
        '0x41':294
        }

def rank_p(some_made):
    return pairs[some_made[0][0]]

twopairs = { # one each of the tp
            ('0x32', '0x33'):293,
            ('0x32', '0x34'):292,
            ('0x32', '0x35'):291,
            ('0x32', '0x36'):290,
            ('0x32', '0x37'):289,
            ('0x32', '0x38'):288,
            ('0x32', '0x39'):287,
            ('0x32', '0x54'):286,
            ('0x32', '0x4a'):285,
            ('0x32', '0x51'):284,
            ('0x32', '0x4b'):283,
            ('0x32', '0x41'):282,
            ('0x33', '0x34'):281,
            ('0x33', '0x35'):280,
            ('0x33', '0x36'):279,
            ('0x33', '0x37'):278,
            ('0x33', '0x38'):277,
            ('0x33', '0x39'):276,
            ('0x33', '0x54'):275,
            ('0x33', '0x4a'):274,
            ('0x33', '0x51'):273,
            ('0x33', '0x4b'):272,
            ('0x33', '0x41'):271,
            ('0x34', '0x35'):270,
            ('0x34', '0x36'):269,
            ('0x34', '0x37'):268,
            ('0x34', '0x38'):267,
            ('0x34', '0x39'):266,
            ('0x34', '0x54'):265,
            ('0x34', '0x4a'):264,
            ('0x34', '0x51'):263,
            ('0x34', '0x4b'):262,
            ('0x34', '0x41'):261,
            ('0x35', '0x36'):260,
            ('0x35', '0x37'):259,
            ('0x35', '0x38'):258,
            ('0x35', '0x39'):257,
            ('0x35', '0x54'):256,
            ('0x35', '0x4a'):255,
            ('0x35', '0x51'):254,
            ('0x35', '0x4b'):253,
            ('0x35', '0x41'):252,
            ('0x36', '0x37'):251,
            ('0x36', '0x38'):250,
            ('0x36', '0x39'):249,
            ('0x36', '0x54'):248,
            ('0x36', '0x4a'):247,
            ('0x36', '0x51'):246,
            ('0x36', '0x4b'):245,
            ('0x36', '0x41'):244,
            ('0x37', '0x38'):243,
            ('0x37', '0x39'):242,
            ('0x37', '0x54'):241,
            ('0x37', '0x4a'):240,
            ('0x37', '0x51'):239,
            ('0x37', '0x4b'):238,
            ('0x37', '0x41'):237,
            ('0x38', '0x39'):236,
            ('0x38', '0x54'):235,
            ('0x38', '0x4a'):234,
            ('0x38', '0x51'):233,
            ('0x38', '0x4b'):232,
            ('0x38', '0x41'):231,
            ('0x39', '0x54'):230,
            ('0x39', '0x4a'):229,
            ('0x39', '0x51'):228,
            ('0x39', '0x4b'):227,
            ('0x39', '0x41'):226,
            ('0x4a', '0x54'):225,
            ('0x51', '0x54'):224,
            ('0x4b', '0x54'):223,
            ('0x41', '0x54'):222,
            ('0x4a', '0x51'):221,
            ('0x4a', '0x4b'):220,
            ('0x41', '0x4a'):219,
            ('0x4b', '0x51'):218,
            ('0x41', '0x51'):217,
            ('0x41', '0x4b'):216
            }

def rank_2p(some_made):
    rawkey = tuple(sorted([some_made[0][0],some_made[2][0]]))
    return twopairs[rawkey]

threekind = { # ditto pair comment
            '0x32':215,
            '0x33':214,
            '0x34':213,
            '0x35':212,
            '0x36':211,
            '0x37':210,
            '0x38':209,
            '0x39':208,
            '0x54':207,
            '0x4a':206,
            '0x51':205,
            '0x4b':204,
            '0x41':203
            }

def rank_3k(some_made):
    return threekind[some_made[0][0]]

straights = {
            ('0x32','0x33','0x34','0x35','0x41'):202,
            ('0x32','0x33','0x34','0x35','0x36'):201,
            ('0x33','0x34','0x35','0x36','0x37'):200,
            ('0x34','0x35','0x36','0x37','0x38'):199,
            ('0x35','0x36','0x37','0x38','0x39'):198,
            ('0x36','0x37','0x38','0x39','0x54'):197,
            ('0x37','0x38','0x39','0x4a','0x54'):196,
            ('0x38','0x39','0x4a','0x51','0x54'):195,
            ('0x39','0x4a','0x4b','0x51','0x54'):194,
            ('0x41','0x4a','0x4b','0x51','0x54'):193
            }

def rank_str(some_made):
    ranks = sorted([x[0] for x in some_made])
    return straights[tuple(ranks)]

flushes = {
            '0x32':192,
            '0x33':191,
            '0x34':190,
            '0x35':189,
            '0x36':188,
            '0x37':187,
            '0x38':186,
            '0x39':185,
            '0x54':184,
            '0x4a':183,
            '0x51':182,
            '0x4b':181,
            '0x41':180
            }

def rank_fl(some_made):
    hc = id_er.get_hc(some_made)
    return flushes[hc[0]]

fullhouses = { # should I move to a 2-card comparison?
            ('0x32', '0x32', '0x32', '0x33', '0x33'):179,
            ('0x32', '0x32', '0x32', '0x34', '0x34'):178,
            ('0x32', '0x32', '0x32', '0x35', '0x35'):177,
            ('0x32', '0x32', '0x32', '0x36', '0x36'):176,
            ('0x32', '0x32', '0x32', '0x37', '0x37'):175,
            ('0x32', '0x32', '0x32', '0x38', '0x38'):174,
            ('0x32', '0x32', '0x32', '0x39', '0x39'):173,
            ('0x32', '0x32', '0x32', '0x54', '0x54'):172,
            ('0x32', '0x32', '0x32', '0x4a', '0x4a'):171,
            ('0x32', '0x32', '0x32', '0x51', '0x51'):170,
            ('0x32', '0x32', '0x32', '0x4b', '0x4b'):169,
            ('0x32', '0x32', '0x32', '0x41', '0x41'):168,
            ('0x32', '0x32', '0x33', '0x33', '0x33'):167,
            ('0x33', '0x33', '0x33', '0x34', '0x34'):166,
            ('0x33', '0x33', '0x33', '0x35', '0x35'):165,
            ('0x33', '0x33', '0x33', '0x36', '0x36'):164,
            ('0x33', '0x33', '0x33', '0x37', '0x37'):163,
            ('0x33', '0x33', '0x33', '0x38', '0x38'):162,
            ('0x33', '0x33', '0x33', '0x39', '0x39'):161,
            ('0x33', '0x33', '0x33', '0x54', '0x54'):160,
            ('0x33', '0x33', '0x33', '0x4a', '0x4a'):159,
            ('0x33', '0x33', '0x33', '0x51', '0x51'):158,
            ('0x33', '0x33', '0x33', '0x4b', '0x4b'):157,
            ('0x33', '0x33', '0x33', '0x41', '0x41'):156,
            ('0x32', '0x32', '0x34', '0x34', '0x34'):155,
            ('0x33', '0x33', '0x34', '0x34', '0x34'):154,
            ('0x34', '0x34', '0x34', '0x35', '0x35'):153,
            ('0x34', '0x34', '0x34', '0x36', '0x36'):152,
            ('0x34', '0x34', '0x34', '0x37', '0x37'):151,
            ('0x34', '0x34', '0x34', '0x38', '0x38'):150,
            ('0x34', '0x34', '0x34', '0x39', '0x39'):149,
            ('0x34', '0x34', '0x34', '0x54', '0x54'):148,
            ('0x34', '0x34', '0x34', '0x4a', '0x4a'):147,
            ('0x34', '0x34', '0x34', '0x51', '0x51'):146,
            ('0x34', '0x34', '0x34', '0x4b', '0x4b'):145,
            ('0x34', '0x34', '0x34', '0x41', '0x41'):144,
            ('0x32', '0x32', '0x35', '0x35', '0x35'):143,
            ('0x33', '0x33', '0x35', '0x35', '0x35'):142,
            ('0x34', '0x34', '0x35', '0x35', '0x35'):141,
            ('0x35', '0x35', '0x35', '0x36', '0x36'):140,
            ('0x35', '0x35', '0x35', '0x37', '0x37'):139,
            ('0x35', '0x35', '0x35', '0x38', '0x38'):138,
            ('0x35', '0x35', '0x35', '0x39', '0x39'):137,
            ('0x35', '0x35', '0x35', '0x54', '0x54'):136,
            ('0x35', '0x35', '0x35', '0x4a', '0x4a'):135,
            ('0x35', '0x35', '0x35', '0x51', '0x51'):134,
            ('0x35', '0x35', '0x35', '0x4b', '0x4b'):133,
            ('0x35', '0x35', '0x35', '0x41', '0x41'):132,
            ('0x32', '0x32', '0x36', '0x36', '0x36'):131,
            ('0x33', '0x33', '0x36', '0x36', '0x36'):130,
            ('0x34', '0x34', '0x36', '0x36', '0x36'):129,
            ('0x35', '0x35', '0x36', '0x36', '0x36'):128,
            ('0x36', '0x36', '0x36', '0x37', '0x37'):127,
            ('0x36', '0x36', '0x36', '0x38', '0x38'):126,
            ('0x36', '0x36', '0x36', '0x39', '0x39'):125,
            ('0x36', '0x36', '0x36', '0x54', '0x54'):124,
            ('0x36', '0x36', '0x36', '0x4a', '0x4a'):123,
            ('0x36', '0x36', '0x36', '0x51', '0x51'):122,
            ('0x36', '0x36', '0x36', '0x4b', '0x4b'):121,
            ('0x36', '0x36', '0x36', '0x41', '0x41'):120,
            ('0x32', '0x32', '0x37', '0x37', '0x37'):119,
            ('0x33', '0x33', '0x37', '0x37', '0x37'):118,
            ('0x34', '0x34', '0x37', '0x37', '0x37'):117,
            ('0x35', '0x35', '0x37', '0x37', '0x37'):116,
            ('0x36', '0x36', '0x37', '0x37', '0x37'):115,
            ('0x37', '0x37', '0x37', '0x38', '0x38'):114,
            ('0x37', '0x37', '0x37', '0x39', '0x39'):113,
            ('0x37', '0x37', '0x37', '0x54', '0x54'):112,
            ('0x37', '0x37', '0x37', '0x4a', '0x4a'):111,
            ('0x37', '0x37', '0x37', '0x51', '0x51'):110,
            ('0x37', '0x37', '0x37', '0x4b', '0x4b'):109,
            ('0x37', '0x37', '0x37', '0x41', '0x41'):108,
            ('0x32', '0x32', '0x38', '0x38', '0x38'):107,
            ('0x33', '0x33', '0x38', '0x38', '0x38'):106,
            ('0x34', '0x34', '0x38', '0x38', '0x38'):105,
            ('0x35', '0x35', '0x38', '0x38', '0x38'):104,
            ('0x36', '0x36', '0x38', '0x38', '0x38'):103,
            ('0x37', '0x37', '0x38', '0x38', '0x38'):102,
            ('0x38', '0x38', '0x38', '0x39', '0x39'):101,
            ('0x38', '0x38', '0x38', '0x54', '0x54'):100,
            ('0x38', '0x38', '0x38', '0x4a', '0x4a'):99,
            ('0x38', '0x38', '0x38', '0x51', '0x51'):98,
            ('0x38', '0x38', '0x38', '0x4b', '0x4b'):97,
            ('0x38', '0x38', '0x38', '0x41', '0x41'):96,
            ('0x32', '0x32', '0x39', '0x39', '0x39'):95,
            ('0x33', '0x33', '0x39', '0x39', '0x39'):94,
            ('0x34', '0x34', '0x39', '0x39', '0x39'):93,
            ('0x35', '0x35', '0x39', '0x39', '0x39'):92,
            ('0x36', '0x36', '0x39', '0x39', '0x39'):91,
            ('0x37', '0x37', '0x39', '0x39', '0x39'):90,
            ('0x38', '0x38', '0x39', '0x39', '0x39'):89,
            ('0x39', '0x39', '0x39', '0x54', '0x54'):88,
            ('0x39', '0x39', '0x39', '0x4a', '0x4a'):87,
            ('0x39', '0x39', '0x39', '0x51', '0x51'):86,
            ('0x39', '0x39', '0x39', '0x4b', '0x4b'):85,
            ('0x39', '0x39', '0x39', '0x41', '0x41'):84,
            ('0x32', '0x32','0x54', '0x54', '0x54'):83,
            ('0x33', '0x33','0x54', '0x54', '0x54'):82,
            ('0x34', '0x34','0x54', '0x54', '0x54'):81,
            ('0x35', '0x35','0x54', '0x54', '0x54'):80,
            ('0x36', '0x36','0x54', '0x54', '0x54'):79,
            ('0x37', '0x37','0x54', '0x54', '0x54'):78,
            ('0x38', '0x38','0x54', '0x54', '0x54'):77,
            ('0x39', '0x39','0x54', '0x54', '0x54'):76,
            ('0x4a', '0x4a','0x54', '0x54', '0x54'):75,
            ('0x51', '0x51','0x54', '0x54', '0x54'):74,
            ('0x4b', '0x4b','0x54', '0x54', '0x54'):73,
            ('0x41', '0x41','0x54', '0x54', '0x54'):72,
            ('0x32', '0x32','0x4a', '0x4a', '0x4a'):71,
            ('0x33', '0x33','0x4a', '0x4a', '0x4a'):70,
            ('0x34', '0x34','0x4a', '0x4a', '0x4a'):69,
            ('0x35', '0x35','0x4a', '0x4a', '0x4a'):68,
            ('0x36', '0x36','0x4a', '0x4a', '0x4a'):67,
            ('0x37', '0x37','0x4a', '0x4a', '0x4a'):66,
            ('0x38', '0x38','0x4a', '0x4a', '0x4a'):65,
            ('0x39', '0x39','0x4a', '0x4a', '0x4a'):64,
            ('0x4a', '0x4a', '0x4a', '0x54', '0x54'):63,
            ('0x4a', '0x4a', '0x4a', '0x51', '0x51'):62,
            ('0x4a', '0x4a', '0x4a', '0x4b', '0x4b'):61,
            ('0x41', '0x41','0x4a', '0x4a', '0x4a'):60,
            ('0x32', '0x32','0x51', '0x51', '0x51'):59,
            ('0x33', '0x33','0x51', '0x51', '0x51'):58,
            ('0x34', '0x34','0x51', '0x51', '0x51'):57,
            ('0x35', '0x35','0x51', '0x51', '0x51'):56,
            ('0x36', '0x36','0x51', '0x51', '0x51'):55,
            ('0x37', '0x37','0x51', '0x51', '0x51'):54,
            ('0x38', '0x38','0x51', '0x51', '0x51'):53,
            ('0x39', '0x39','0x51', '0x51', '0x51'):52,
            ('0x51', '0x51', '0x51', '0x54', '0x54'):51,
            ('0x4a', '0x4a','0x51', '0x51', '0x51'):50,
            ('0x4b', '0x4b','0x51', '0x51', '0x51'):49,
            ('0x41', '0x41','0x51', '0x51', '0x51'):48,
            ('0x32', '0x32','0x4b', '0x4b', '0x4b'):47,
            ('0x33', '0x33','0x4b', '0x4b', '0x4b'):46,
            ('0x34', '0x34','0x4b', '0x4b', '0x4b'):45,
            ('0x35', '0x35','0x4b', '0x4b', '0x4b'):44,
            ('0x36', '0x36','0x4b', '0x4b', '0x4b'):43,
            ('0x37', '0x37','0x4b', '0x4b', '0x4b'):42,
            ('0x38', '0x38','0x4b', '0x4b', '0x4b'):41,
            ('0x39', '0x39','0x4b', '0x4b', '0x4b'):40,
            ('0x4b', '0x4b', '0x4b', '0x54', '0x54'):39,
            ('0x4a', '0x4a','0x4b', '0x4b', '0x4b'):38,
            ('0x4b', '0x4b', '0x4b', '0x51', '0x51'):37,
            ('0x41', '0x41','0x4b', '0x4b', '0x4b'):36,
            ('0x32', '0x32','0x41', '0x41', '0x41'):35,
            ('0x33', '0x33','0x41', '0x41', '0x41'):34,
            ('0x34', '0x34','0x41', '0x41', '0x41'):33,
            ('0x35', '0x35','0x41', '0x41', '0x41'):32,
            ('0x36', '0x36','0x41', '0x41', '0x41'):31,
            ('0x37', '0x37','0x41', '0x41', '0x41'):30,
            ('0x38', '0x38','0x41', '0x41', '0x41'):29,
            ('0x39', '0x39','0x41', '0x41', '0x41'):28,
            ('0x41', '0x41', '0x41', '0x54', '0x54'):27,
            ('0x41', '0x41', '0x41', '0x4a', '0x4a'):26,
            ('0x41', '0x41', '0x41', '0x51', '0x51'):25,
            ('0x41', '0x41', '0x41', '0x4b', '0x4b'):24
            }

def rank_fh(some_made):
    some_made = sorted(some_made)
    some_made = [x[0] for x in some_made]
    return fullhouses[tuple(some_made)]


fourkind = { # ditto pair comment
            '0x32':23,
            '0x33':22,
            '0x34':21,
            '0x35':20,
            '0x36':19,
            '0x37':18,
            '0x38':17,
            '0x39':16,
            '0x54':15,
            '0x4a':14,
            '0x51':13,
            '0x4b':12,
            '0x41':11
            }

def rank_4k(some_made):
    return fourkind[some_made[0][0]]

straightflushes =  {'0x41':1,
                    '0x4b':2,
                    '0x51':3,
                    '0x4a':4,
                    '0x54':5,
                    '0x39':6,
                    '0x38':7,
                    '0x37':8,
                    '0x36':9,
                    '0x35':10,
                    } # id a straight flush and test

def rank_strfl(some_made):
    hc = id_er.get_hc(some_made)
    if hc[0] == '0x41' and '0x35' in [card[0] for card in some_made]:
        return straightflushes['0x35']
    else:
        return straightflushes[hc[0]]

def main(alist):
    made, rest, name = id_er.main(alist)
    if name == 'HC':
        rank = rank_hc(made)
    elif name == 'P':
        rank = rank_p(made)
    elif name == '2P':
        rank = rank_2p(made)
    elif name == '3K':
        rank = rank_3k(made)
    elif name == 'STR':
        rank = rank_str(made)
    elif name == 'FL':
        rank = rank_fl(made)
    elif name == 'FH':
        rank = rank_fh(made)
    elif name == '4K':
        rank = rank_4k(made)
    elif name == 'STRFL':
        rank = rank_strfl(made)
    # hack to fix a mistake in id_er:
    if type(made) != type([1]):
        made = [made]
        rest = [x for x in rest if x not in made]
    # make sure made + rest isn't longer than a poker hand
    if len(made) + len(rest) > 5:
        new_rest = []
        while len(made) + len(new_rest) < 5:
            hc = id_er.get_hc(rest)
            rest.remove(hc)
            new_rest.append(hc)
        rest = new_rest
    return name, rank, made, rest

def rank_kicker(alist,val=-1):
    """ return an int value for kicker card given by val

    default for val gives best kicker value.  -2 gives second
    best kicker, etc.
    """
    ranks = {'0x32':2,'0x33':3,'0x34':4,'0x35':5,'0x36':6,
             '0x37':7,'0x38':8,'0x39':9,
             '0x54':10,'0x4a':11,'0x51':12,'0x4b':13,'0x41':14}
    rankedlist = [ranks[x[0]] for x in alist]
    sorted(rankedlist)

    return rankedlist[val]

## USE THIS TO ADJUDICATE BY KICKER:

def compare_two_lists_of_kickers(alist1,alist2):
    """ Given two lists of integers,
    """
    def sort_kickers(alist):
        """ return a list of integers corresponding to kicker strength
        """

        ranks = {'0x32':2,'0x33':3,'0x34':4,'0x35':5,'0x36':6,
                 '0x37':7,'0x38':8,'0x39':9,
                 '0x54':10,'0x4a':11,'0x51':12,'0x4b':13,'0x41':14}
        rankedlist = [ranks[x[0]] for x in alist]
        rankedlist = sorted(rankedlist)
        rankedlist.reverse()
        return rankedlist

    # prepare data
    if alist1 and type(alist1[0]) is not type(1):
        tar1 = sort_kickers(alist1[3])
        tar2 = sort_kickers(alist2[3])
    else:
        tar1 = alist1
        tar2 = alist2

    # if the lists are the same, then they have the same value.
    if tar1 == tar2:
        return 0
    # else: compare the members of the lists one at a time.
    if tar1[0] > tar2[0]:
        return -1
    elif tar1[0] < tar2[0]:
        return 1
    else:
        return compare_two_lists_of_kickers(tar1[1:],tar2[1:])


# > 202 -- this is the cutoff for 5-card hands.  For any hand with a
# rank higher than this we might need to adjudicate the hand by
# kicker.
####################################

if __name__ == '__main__':
    h1 = [('A','s'),('6','c'),('J','d'),('9','s'),('3','c')]
    h2 = [('A','d'),('7','h'),('J','s'),('9','h'),('3','d')]
    h1 = [convert(c) for c in h1]
    h2 = [convert(c) for c in h2]
    ranked = [main(h1), main(h2)]
    print "ranked: ", ranked
    print
    for x in ranked:
        print [convert(c) for c in x[3]]
    print

    def s(x):
        return x[3]

    ranked.sort(compare_two_lists_of_kickers)

    for x in ranked:
        print [convert(c) for c in x[3]]

    # h3 = [('A', 's'), ('A', 'h'), ('J', 's'), ('2', 'c'), ('5', 'd')]
    # h = [convert(c) for c in h3]
    # res1 = main(h)
    # res2 = []
    # for item in res1:
    #     if type(item) == type([1]):
    #         res2.append([convert(c) for c in item])
    #     else:
    #         res2.append(item)
    # print res2
